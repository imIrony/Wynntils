package com.wynntils.modules.richpresence.discordgamesdk;

import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.platform.win32.WinUser.MSG;
import com.wynntils.modules.richpresence.discordgamesdk.enums.EDiscordActivityActionType;
import com.wynntils.modules.richpresence.discordgamesdk.enums.EDiscordKeyVariant;
import com.wynntils.modules.richpresence.discordgamesdk.enums.EDiscordMouseButton;
import com.wynntils.modules.richpresence.discordgamesdk.enums.EDiscordResult;
import com.wynntils.modules.richpresence.discordgamesdk.options.DiscordGameSDKOptions;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : line 537</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IDiscordOverlayManager extends Structure implements DiscordGameSDKOptions {

    /** C type : is_enabled_callback* */
    public IDiscordOverlayManager.is_enabled_callback is_enabled;
    /** C type : is_locked_callback* */
    public IDiscordOverlayManager.is_locked_callback is_locked;
    /** C type : set_locked_callback* */
    public IDiscordOverlayManager.set_locked_callback set_locked;
    /** C type : open_activity_invite_callback* */
    public IDiscordOverlayManager.open_activity_invite_callback open_activity_invite;
    /** C type : open_guild_invite_callback* */
    public IDiscordOverlayManager.open_guild_invite_callback open_guild_invite;
    /** C type : open_voice_settings_callback* */
    public IDiscordOverlayManager.open_voice_settings_callback open_voice_settings;
    /** C type : init_drawing_dxgi_callback* */
    public IDiscordOverlayManager.init_drawing_dxgi_callback init_drawing_dxgi;
    /** C type : on_present_callback* */
    public DiscordGameSDKLibrary.not_implemented on_present;
    /** C type : forward_message_callback* */
    public DiscordGameSDKLibrary.not_implemented forward_message;
    /** C type : key_event_callback* */
    public DiscordGameSDKLibrary.not_implemented key_event;
    /** C type : char_event_callback* */
    public DiscordGameSDKLibrary.not_implemented char_event;
    /** C type : mouse_button_event_callback* */
    public DiscordGameSDKLibrary.not_implemented mouse_button_event;
    /** C type : mouse_motion_event_callback* */
    public DiscordGameSDKLibrary.not_implemented mouse_motion_event;
    /** C type : ime_commit_text_callback* */
    public DiscordGameSDKLibrary.not_implemented ime_commit_text;
    /** C type : ime_set_composition_callback* */
    public DiscordGameSDKLibrary.not_implemented ime_set_composition;
    /** C type : ime_cancel_composition_callback* */
    public DiscordGameSDKLibrary.not_implemented ime_cancel_composition;
    /** C type : set_ime_composition_range_callback_callback* */
    public DiscordGameSDKLibrary.not_implemented set_ime_composition_range_callback;
    /** C type : set_ime_selection_bounds_callback_callback* */
    public DiscordGameSDKLibrary.not_implemented set_ime_selection_bounds_callback;
    /** C type : is_point_inside_click_zone_callback* */
    public IDiscordOverlayManager.is_point_inside_click_zone_callback is_point_inside_click_zone;

    public interface is_enabled_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, Pointer enabled);
    };

    public interface is_locked_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, Pointer locked);
    };

    /** <i>native declaration : line 540</i> */
    public interface set_locked_callback_callback_callback extends Callback, DiscordGameSDKOptions {
        void apply(Pointer callback_data, EDiscordResult result);
    };

    public interface set_locked_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, byte locked, Pointer callback_data, IDiscordOverlayManager.set_locked_callback_callback_callback callback);
    };

    /** <i>native declaration : line 541</i> */
    public interface open_activity_invite_callback_callback_callback extends Callback, DiscordGameSDKOptions {
        void apply(Pointer callback_data, EDiscordResult result);
    };

    public interface open_activity_invite_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, EDiscordActivityActionType type, Pointer callback_data, IDiscordOverlayManager.open_activity_invite_callback_callback_callback callback);
    };

    /** <i>native declaration : line 542</i> */
    public interface open_guild_invite_callback_callback_callback extends Callback, DiscordGameSDKOptions {
        void apply(Pointer callback_data, EDiscordResult result);
    };

    public interface open_guild_invite_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, String code, Pointer callback_data, IDiscordOverlayManager.open_guild_invite_callback_callback_callback callback);
    };

    /** <i>native declaration : line 543</i> */
    public interface open_voice_settings_callback_callback_callback extends Callback, DiscordGameSDKOptions {
        void apply(Pointer callback_data, EDiscordResult result);
    };

    public interface open_voice_settings_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, Pointer callback_data, IDiscordOverlayManager.open_voice_settings_callback_callback_callback callback);
    };

    /**
     * swapchain is IDXGISwapChain and is windows only
     */
    public interface init_drawing_dxgi_callback extends Callback, DiscordGameSDKOptions {
        EDiscordResult apply(IDiscordOverlayManager manager, Pointer swapchain, byte use_message_forwarding);
    };

    public interface on_present_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager);
    };

    public interface forward_message_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, MSG message);
    };

    public interface key_event_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, byte down, String key_code, EDiscordKeyVariant variant);
    };

    public interface char_event_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, String character);
    };

    public interface mouse_button_event_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, byte down, int click_count, EDiscordMouseButton which, int x, int y);
    };

    public interface mouse_motion_event_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, int x, int y);
    };

    public interface ime_commit_text_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, String text);
    };

    public interface ime_set_composition_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, String text, DiscordImeUnderline underlines, int underlines_length, int from, int to);
    };

    public interface ime_cancel_composition_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager);
    };

    /** <i>native declaration : line 554</i> */
    public interface set_ime_composition_range_callback_callback_on_ime_composition_range_changed_callback extends Callback, DiscordGameSDKOptions {
        void apply(Pointer on_ime_composition_range_changed_data, int from, int to, DiscordRect bounds, int bounds_length);
    };

    public interface set_ime_composition_range_callback_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, Pointer on_ime_composition_range_changed_data, IDiscordOverlayManager.set_ime_composition_range_callback_callback_on_ime_composition_range_changed_callback on_ime_composition_range_changed);
    };

    /** <i>native declaration : line 555</i> */
    public interface set_ime_selection_bounds_callback_callback_on_ime_selection_bounds_changed_callback extends Callback, DiscordGameSDKOptions {
        void apply(Pointer on_ime_selection_bounds_changed_data, DiscordRect.ByValue anchor, DiscordRect.ByValue focus, byte is_anchor_first);
    };

    public interface set_ime_selection_bounds_callback_callback extends Callback, DiscordGameSDKOptions {
        void apply(IDiscordOverlayManager manager, Pointer on_ime_selection_bounds_changed_data, IDiscordOverlayManager.set_ime_selection_bounds_callback_callback_on_ime_selection_bounds_changed_callback on_ime_selection_bounds_changed);
    };

    public interface is_point_inside_click_zone_callback extends Callback, DiscordGameSDKOptions {
        byte apply(IDiscordOverlayManager manager, int x, int y);
    };

    public IDiscordOverlayManager() {
        super();
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("is_enabled", "is_locked", "set_locked", "open_activity_invite", "open_guild_invite", "open_voice_settings", "init_drawing_dxgi", "on_present", "forward_message", "key_event", "char_event", "mouse_button_event", "mouse_motion_event", "ime_commit_text", "ime_set_composition", "ime_cancel_composition", "set_ime_composition_range_callback", "set_ime_selection_bounds_callback", "is_point_inside_click_zone");
    }

    public IDiscordOverlayManager(Pointer peer) {
        super(peer);
    }

    public static class ByReference extends IDiscordOverlayManager implements Structure.ByReference {

    };

    public static class ByValue extends IDiscordOverlayManager implements Structure.ByValue {

    };
}
